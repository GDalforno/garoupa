#  Copyright (c) 2021. Gabriel Dalforno
#  This file is part of the garoupa project.
#  Please respect the license - more about this in the section (*) below.
#
#  garoupa is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  garoupa is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with garoupa.  If not, see <http://www.gnu.org/licenses/>.
#
#  (*) Removing authorship by any means, e.g. by distribution of derived
#  works or verbatim, obfuscated, compiled or rewritten versions of any
#  part of this work is a crime and is unethical regarding the effort and
#  time spent here.
from functools import reduce
from operator import iconcat

###########################################################################
###########################################################################
# Calculates action of permutation b on the set a
from timeit import timeit


def pmat_mult(a: list, b: list) -> list:
    return [a[x] for x in b]


# Inverts a permutation
def pmat_inv(m: list) -> list:
    size = len(m)
    r = list(range(size))
    for i in range(size):
        r[m[i]] = i
    return r


###########################################################################
###########################################################################
# power[p][n] = generator of Zp to the power of n
power = {
    2: [
        [0, 1],
        [1, 0]
    ],
    3: [
        [0, 1, 2],
        [2, 0, 1],
        [1, 2, 0]
    ],
    5: [
        [0, 1, 2, 3, 4],
        [4, 0, 1, 2, 3],
        [3, 4, 0, 1, 2],
        [2, 3, 4, 0, 1],
        [1, 2, 3, 4, 0]
    ],
    7: [
        [0, 1, 2, 3, 4, 5, 6],
        [6, 0, 1, 2, 3, 4, 5],
        [5, 6, 0, 1, 2, 3, 4],
        [4, 5, 6, 0, 1, 2, 3],
        [3, 4, 5, 6, 0, 1, 2],
        [2, 3, 4, 5, 6, 0, 1],
        [1, 2, 3, 4, 5, 6, 0]
    ],
    11: [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        [9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8],
        [8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7],
        [7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6],
        [6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5],
        [5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4],
        [4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3],
        [3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2],
        [2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1],
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]
    ],
    13: [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
        [12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
        [11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        [10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        [9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8],
        [8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7],
        [7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6],
        [6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5],
        [5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4],
        [4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3],
        [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2],
        [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1],
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0]
    ],
    17: [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
        [16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        [15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
        [14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
        [13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
        [12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
        [11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        [10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        [9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8],
        [8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7],
        [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6],
        [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5],
        [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4],
        [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3],
        [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2],
        [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1],
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0]
    ],
    19: [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
        [18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
        [17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
        [16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        [15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
        [14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
        [13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
        [12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
        [11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        [10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8],
        [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7],
        [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6],
        [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5],
        [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4],
        [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3],
        [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2],
        [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1],
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0]
    ]
}

# inv_power[p][permutation] = inverse of power function
inv_power = {
    2: {
        tuple([0, 1]): 0,
        tuple([1, 0]): 1
    },
    3: {
        tuple([0, 1, 2]): 0,
        tuple([2, 0, 1]): 1,
        tuple([1, 2, 0]): 2
    },
    5: {
        tuple([0, 1, 2, 3, 4]): 0,
        tuple([4, 0, 1, 2, 3]): 1,
        tuple([3, 4, 0, 1, 2]): 2,
        tuple([2, 3, 4, 0, 1]): 3,
        tuple([1, 2, 3, 4, 0]): 4
    },
    7: {
        tuple([0, 1, 2, 3, 4, 5, 6]): 0,
        tuple([6, 0, 1, 2, 3, 4, 5]): 1,
        tuple([5, 6, 0, 1, 2, 3, 4]): 2,
        tuple([4, 5, 6, 0, 1, 2, 3]): 3,
        tuple([3, 4, 5, 6, 0, 1, 2]): 4,
        tuple([2, 3, 4, 5, 6, 0, 1]): 5,
        tuple([1, 2, 3, 4, 5, 6, 0]): 6
    },
    11: {
        tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]): 0,
        tuple([10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]): 1,
        tuple([9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8]): 2,
        tuple([8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7]): 3,
        tuple([7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6]): 4,
        tuple([6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5]): 5,
        tuple([5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4]): 6,
        tuple([4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3]): 7,
        tuple([3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2]): 8,
        tuple([2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1]): 9,
        tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]): 10
    },
    13: {
        tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]): 0,
        tuple([12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]): 1,
        tuple([11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]): 2,
        tuple([10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]): 3,
        tuple([9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8]): 4,
        tuple([8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7]): 5,
        tuple([7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6]): 6,
        tuple([6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5]): 7,
        tuple([5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4]): 8,
        tuple([4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3]): 9,
        tuple([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2]): 10,
        tuple([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1]): 11,
        tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0]): 12
    },
    17: {
        tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]): 0,
        tuple([16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]): 1,
        tuple([15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]): 2,
        tuple([14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]): 3,
        tuple([13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]): 4,
        tuple([12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]): 5,
        tuple([11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]): 6,
        tuple([10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]): 7,
        tuple([9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8]): 8,
        tuple([8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7]): 9,
        tuple([7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6]): 10,
        tuple([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5]): 11,
        tuple([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4]): 12,
        tuple([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3]): 13,
        tuple([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2]): 14,
        tuple([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1]): 15,
        tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0]): 16
    },
    19: {
        tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]): 0,
        tuple([18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]): 1,
        tuple([17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]): 2,
        tuple([16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]): 3,
        tuple([15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]): 4,
        tuple([14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]): 5,
        tuple([13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]): 6,
        tuple([12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]): 7,
        tuple([11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]): 8,
        tuple([10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]): 9,
        tuple([9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8]): 10,
        tuple([8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7]): 11,
        tuple([7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6]): 12,
        tuple([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5]): 13,
        tuple([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4]): 14,
        tuple([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3]): 15,
        tuple([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2]): 16,
        tuple([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1]): 17,
        tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0]): 18
    }
}

blocks = {
    2: [
        [0, 1],
        [2, 3]
    ],
    3: [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8]
    ],
    5: [
        [0, 1, 2, 3, 4],
        [5, 6, 7, 8, 9],
        [10, 11, 12, 13, 14],
        [15, 16, 17, 18, 19],
        [20, 21, 22, 23, 24]
    ],
    7: [
        [0, 1, 2, 3, 4, 5, 6],
        [7, 8, 9, 10, 11, 12, 13],
        [14, 15, 16, 17, 18, 19, 20],
        [21, 22, 23, 24, 25, 26, 27],
        [28, 29, 30, 31, 32, 33, 34],
        [35, 36, 37, 38, 39, 40, 41],
        [42, 43, 44, 45, 46, 47, 48]
    ],
    11: [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
        [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32],
        [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
        [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
        [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65],
        [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76],
        [77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87],
        [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98],
        [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109],
        [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
    ],
    13: [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
        [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
        [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38],
        [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51],
        [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64],
        [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77],
        [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
        [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103],
        [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116],
        [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129],
        [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142],
        [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155],
        [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168]
    ],
    17: [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
        [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33],
        [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
        [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67],
        [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84],
        [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101],
        [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118],
        [119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135],
        [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152],
        [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169],
        [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186],
        [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203],
        [204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
        [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237],
        [238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254],
        [255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271],
        [272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288]
    ],
    19: [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
        [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37],
        [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
        [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75],
        [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94],
        [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113],
        [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132],
        [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151],
        [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170],
        [171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189],
        [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208],
        [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227],
        [228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246],
        [247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265],
        [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284],
        [285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303],
        [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322],
        [323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341],
        [342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360]
    ],

}

radix = [
    (2 ** 3) * (3 ** 4) * (5 ** 6) * (7 ** 8) * (11 ** 12) * (13 ** 14) * (17 ** 18),
    (2 ** 3) * (3 ** 4) * (5 ** 6) * (7 ** 8) * (11 ** 12) * (13 ** 14),
    (2 ** 3) * (3 ** 4) * (5 ** 6) * (7 ** 8) * (11 ** 12),
    (2 ** 3) * (3 ** 4) * (5 ** 6) * (7 ** 8),
    (2 ** 3) * (3 ** 4) * (5 ** 6),
    (2 ** 3) * (3 ** 4),
    (2 ** 3),
    1
]

primes = [19, 17, 13, 11, 7, 5, 3, 2]

N_primes = 8

identity = {
    2: [i for i in range(2 ** 2)],
    3: [i for i in range(3 ** 2)],
    5: [i for i in range(5 ** 2)],
    7: [i for i in range(7 ** 2)],
    11: [i for i in range(11 ** 2)],
    13: [i for i in range(13 ** 2)],
    17: [i for i in range(17 ** 2)],
    19: [i for i in range(19 ** 2)],
}


###########################################################################
###########################################################################
# Finds the coefficients of N in the base B
def N_to_baseB(N: int, p: int) -> list:
    result = [0] * (p + 1)
    i = 0
    while N != 0:
        N, r = divmod(N, p)
        result[i] = r
        i += 1
    return result[::-1]


# Maps the coefficients of N into permutations in H:
def coefs_to_perms(coefs: list, p: int) -> list:
    return [power[p][n] for n in coefs]


# Finds the action of an element of W2,p using its decomposed representation
def apply_perms_to_blocks(perms: list, p: int) -> list:
    perm_global = perms[-1]
    perms.pop()

    permuted_blocks = [
        pmat_mult(block, perm) for perm, block in zip(perms, blocks[p])
    ]
    permuted_all = pmat_mult(permuted_blocks, perm_global)

    flatted_permuted_all = reduce(iconcat, permuted_all, [])
    return flatted_permuted_all


# Maps integer to element in W2,p
def int_to_subelem(N: int, p: int) -> list:
    assert N >= 0 and N < p ** (p + 1)

    coefs = N_to_baseB(N, p)
    perms = coefs_to_perms(coefs, p)
    permuted_set = apply_perms_to_blocks(perms, p)
    return permuted_set


###########################################################################
###########################################################################
# Decomposes element in W2,p into permutations in H
def decompose_sigma(sigma: list, p: int) -> list:
    blocks = [sigma[i:i + p] for i in range(0, p ** 2, p)]

    permG = [min(block) // p for block in blocks]
    ordered_blocks = pmat_mult(blocks, pmat_inv(permG))
    perms = [list(map(lambda x: x % p, block)) for block in ordered_blocks]
    perms.append(permG)

    return perms


# Maps permutations in H to coefficients in B
def perms_to_coefs(perms: list, p: int) -> list:
    return [inv_power[p][tuple(perm)] for perm in perms]


# Convert the base B to the decimal base
def baseB_to_N(coefs: list, p: int) -> int:
    N = 0
    for k in range(p + 1):
        N += coefs[k] * (p ** k)
    return N


# Maps element in W2,p to integer
def subelem_to_int(sigma: list, p: int) -> int:
    perms = decompose_sigma(sigma, p)
    coefs = perms_to_coefs(perms, p)[::-1]
    N = baseB_to_N(coefs, p)

    return N


###########################################################################
###########################################################################
# Converts integer to element in G
def int_to_elem(N: int) -> list:
    e = [None] * N_primes
    for i in range(N_primes):
        if N >= radix[i]:
            break
        e[N_primes - i - 1] = identity[primes[i]]
    for j in range(i, N_primes):
        r, N = divmod(N, radix[j])
        e[N_primes - j - 1] = int_to_subelem(r, primes[j])
    return e


# Converts element in G to integer
def elem_to_int(e: list) -> int:
    N = 0
    primes_ = primes[::-1]
    radix_ = radix[::-1]
    for i, sigma in enumerate(e):
        N += radix_[i] * subelem_to_int(sigma, primes_[i])
    return N


# Multiplies 2 elements of G
def multiplyG(g1: list, g2: list) -> list:
    return [pmat_mult(w1, w2) for w1, w2 in zip(g1, g2)]


# Finds inverse of element in G
def inverseG(g: list) -> list:
    return [pmat_inv(w) for w in g]


###########################################################################
###########################################################################

# Converting number 5 to element in W2,2
# Step 1: write 5 in the B base: 5B = [1, 0, 1]
# Step 2: maps each coefficient to permutation using the dictionary power:
#         perm5B = [[1, 0], [0, 1], [1, 0]]
# Step 3: recover the block corresponding to p=2 using the dictionary blocks:
#         ord_blocks = [[0, 1], [2, 3]]
# Step 4: permute the blocks using all permutations except the last one:
#         perm_blocks = [[1, 0], [2, 3]]
# Step 5: permute the perm_blocks list using the last permutation
#         perm_blocks = [[2, 3], [1, 0]]
# Step 6: flat the perm_blocks list:
#         perm_blocks_flat = [2, 3, 1, 0]
# Voila: 5 -> [2, 3, 1, 0]

# Converting element [2, 3, 1, 0] in W2,2 to integer
# Step 1: divide the permutation in blocks:
#         perm_blocks = [[2, 3], [1, 0]]
# Step 2: find the minimum of each block:
#         min_blocks = [2, 0]
# Step 3: divide each element in the min_blocks by p=2:
#         min_blocks = [1, 0]
# Step 4: finds inverse of permutation min_blocks:
#         inv_global = [1, 0]
# Step 5: apply inv_global to perm_blocks:
#         ord_blocks = [[1, 0], [2, 3]]
# Step 6: take the mod p of each element in ord_blocks:
#         perms = [[1, 0], [0, 1]]
# Step 7: maps each element of perms to integer using the inv_power dictionary:
#         coefs = [1, 0]
# Step 8: maps min_blocks to its coefficient using the inv_power as well:
#         coef_global = 1
# Step 9: adds coef_global to the coefs list:
#         coefs = [1, 0, 1]
# Step 10: multiply the coefs by the elements in the base B
#         N = 1*1 + 0*2 + 1*4 = 5
# Voila: [2, 3, 1, 0] -> 5


# Example of usage
# N = 23071999
# M = 99917032
# s1 = int_to_elem(N)
# s2 = int_to_elem(M)
# s3 = multiplyG(s1, s2)
# O = elem_to_int(s3)
# print(f"N = {N}")
# print(f"M = {M}")
# print(f"O = NxM = {O}")
# inv_s1 = inverseG(s1)
# invN = elem_to_int(inv_s1)
# zero = elem_to_int(multiplyG(s1, inv_s1))
# print(f"N^-1 = {invN}")
# print(f"N*N^-1 = {zero}")

x = (2 ** 3) * (3 ** 4) * (5 ** 6) * (7 ** 8) * (11 ** 12) * (13 ** 14) * (17 ** 18) * (19 ** 20) - 1
e = int_to_elem(x)
print(e)


def f():
    return multiplyG(e, e)
    # return elem_to_int(int_to_elem(x))


t = timeit(f, number=10000)
print(t * 100, "us")
