#  Copyright (c) 2021. Gabriel Dalforno
#  This file is part of the garoupa project.
#  Please respect the license - more about this in the section (*) below.
#
#  garoupa is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  garoupa is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with garoupa.  If not, see <http://www.gnu.org/licenses/>.
#
#  (*) Removing authorship by any means, e.g. by distribution of derived
#  works or verbatim, obfuscated, compiled or rewritten versions of any
#  part of this work is a crime and is unethical regarding the effort and
#  time spent here.

###########################################################################
###########################################################################

# The main functions in this module are:
# - int_to_elem(n) : converts an integer n to an element in G
# - elem_ton_int(x): converts an element x in G to an integer
# - multiplyG(s, t): multiplies 2 elements in G
# - inverseG(s)    : inverts an element of G
#
# The representation of W2,p is given by the raw definiton of wreath product
# x = (n1, n2, ..., np).sG where ni is in Zp and sG a permutation in H < Sp
#
# The complexity of the operations are:
# int_to_elem : O(log(n, p) + sum(log(ni, pi) for pi in P)) where ni are the
#               coefficients of n in the mixed radix base B
# elem_to_int : O(sum(pi for pi in P))
# multiplyG   : O(2*sum(pi for pi in P))
# inverseG    : O(2*sum(pi for pi in P))
#
# It is faster than the previous attempt and, in practice, way much simpler
# to implement.
###########################################################################
###########################################################################

# power[p][n] = generator of Zp to the power of n
power = {
    2:[
        [0, 1], 
        [1, 0]
    ],
    3:[
        [0, 1, 2], 
        [2, 0, 1], 
        [1, 2, 0]
    ],
    5:[
        [0, 1, 2, 3, 4], 
        [4, 0, 1, 2, 3], 
        [3, 4, 0, 1, 2], 
        [2, 3, 4, 0, 1], 
        [1, 2, 3, 4, 0]
    ],
    7:[
        [0, 1, 2, 3, 4, 5, 6], 
        [6, 0, 1, 2, 3, 4, 5], 
        [5, 6, 0, 1, 2, 3, 4], 
        [4, 5, 6, 0, 1, 2, 3], 
        [3, 4, 5, 6, 0, 1, 2], 
        [2, 3, 4, 5, 6, 0, 1], 
        [1, 2, 3, 4, 5, 6, 0]
    ],
    11:[
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 
        [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 
        [9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8], 
        [8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7], 
        [7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6], 
        [6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5], 
        [5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4], 
        [4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3], 
        [3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2], 
        [2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1], 
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]
    ],
    13:[
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 
        [12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 
        [11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 
        [10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 
        [9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8], 
        [8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7], 
        [7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6], 
        [6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5], 
        [5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4], 
        [4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3], 
        [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2], 
        [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1], 
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0]
    ],
    17:[
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 
        [16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 
        [15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 
        [14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 
        [13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 
        [12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 
        [11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 
        [10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 
        [9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8], 
        [8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7], 
        [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6], 
        [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5], 
        [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4], 
        [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3], 
        [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2], 
        [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1], 
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0]
    ],
    19:[
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 
        [18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 
        [17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 
        [16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 
        [15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 
        [14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 
        [13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 
        [12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 
        [11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 
        [10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 
        [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8], 
        [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7], 
        [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6], 
        [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5], 
        [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4], 
        [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3], 
        [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2], 
        [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1], 
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0]
    ]
}

# inv_power[p][permutation] = inverse of power function
inv_power = {
    2:{
        tuple([0, 1]):0, 
        tuple([1, 0]):1
    },
    3:{
        tuple([0, 1, 2]):0, 
        tuple([2, 0, 1]):1, 
        tuple([1, 2, 0]):2
    },
    5:{
        tuple([0, 1, 2, 3, 4]):0, 
        tuple([4, 0, 1, 2, 3]):1, 
        tuple([3, 4, 0, 1, 2]):2, 
        tuple([2, 3, 4, 0, 1]):3, 
        tuple([1, 2, 3, 4, 0]):4
    },
    7:{
        tuple([0, 1, 2, 3, 4, 5, 6]):0, 
        tuple([6, 0, 1, 2, 3, 4, 5]):1, 
        tuple([5, 6, 0, 1, 2, 3, 4]):2, 
        tuple([4, 5, 6, 0, 1, 2, 3]):3, 
        tuple([3, 4, 5, 6, 0, 1, 2]):4, 
        tuple([2, 3, 4, 5, 6, 0, 1]):5, 
        tuple([1, 2, 3, 4, 5, 6, 0]):6
    },
    11:{
        tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):0, 
        tuple([10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):1, 
        tuple([9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8]):2, 
        tuple([8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7]):3, 
        tuple([7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6]):4, 
        tuple([6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5]):5, 
        tuple([5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4]):6, 
        tuple([4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3]):7, 
        tuple([3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2]):8, 
        tuple([2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1]):9, 
        tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]):10
    },
    13:{
        tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]):0, 
        tuple([12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]):1, 
        tuple([11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):2, 
        tuple([10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):3, 
        tuple([9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8]):4, 
        tuple([8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7]):5, 
        tuple([7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6]):6, 
        tuple([6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5]):7, 
        tuple([5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4]):8, 
        tuple([4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3]):9, 
        tuple([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2]):10, 
        tuple([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1]):11, 
        tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0]):12
    },
    17:{
        tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]):0, 
        tuple([16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]):1, 
        tuple([15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]):2, 
        tuple([14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]):3, 
        tuple([13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]):4, 
        tuple([12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]):5, 
        tuple([11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):6, 
        tuple([10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):7, 
        tuple([9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8]):8, 
        tuple([8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7]):9, 
        tuple([7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6]):10, 
        tuple([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5]):11, 
        tuple([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4]):12, 
        tuple([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3]):13, 
        tuple([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2]):14, 
        tuple([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1]):15, 
        tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0]):16
    },
    19:{
        tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]):0, 
        tuple([18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]):1, 
        tuple([17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]):2, 
        tuple([16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]):3, 
        tuple([15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]):4, 
        tuple([14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]):5, 
        tuple([13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]):6, 
        tuple([12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]):7, 
        tuple([11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):8, 
        tuple([10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):9, 
        tuple([9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8]):10, 
        tuple([8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7]):11, 
        tuple([7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6]):12, 
        tuple([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5]):13, 
        tuple([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4]):14, 
        tuple([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3]):15, 
        tuple([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2]):16, 
        tuple([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1]):17, 
        tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0]):18
    }
}

# perm_inv[p][permutation] = inverse of permutation
perm_inv = {
    2:{
        tuple([0, 1]):[0, 1], 
        tuple([1, 0]):[1, 0]
    },
    3:{
        tuple([0, 1, 2]):[0, 1, 2], 
        tuple([2, 0, 1]):[1, 2, 0], 
        tuple([1, 2, 0]):[2, 0, 1]
    },
    5:{
        tuple([0, 1, 2, 3, 4]):[0, 1, 2, 3, 4], 
        tuple([4, 0, 1, 2, 3]):[1, 2, 3, 4, 0], 
        tuple([3, 4, 0, 1, 2]):[2, 3, 4, 0, 1], 
        tuple([2, 3, 4, 0, 1]):[3, 4, 0, 1, 2], 
        tuple([1, 2, 3, 4, 0]):[4, 0, 1, 2, 3]
    },
    7:{
        tuple([0, 1, 2, 3, 4, 5, 6]):[0, 1, 2, 3, 4, 5, 6],
        tuple([6, 0, 1, 2, 3, 4, 5]):[1, 2, 3, 4, 5, 6, 0],
        tuple([5, 6, 0, 1, 2, 3, 4]):[2, 3, 4, 5, 6, 0, 1],
        tuple([4, 5, 6, 0, 1, 2, 3]):[3, 4, 5, 6, 0, 1, 2],
        tuple([3, 4, 5, 6, 0, 1, 2]):[4, 5, 6, 0, 1, 2, 3],
        tuple([2, 3, 4, 5, 6, 0, 1]):[5, 6, 0, 1, 2, 3, 4],
        tuple([1, 2, 3, 4, 5, 6, 0]):[6, 0, 1, 2, 3, 4, 5]

    },
    11:{
        tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        tuple([10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0],
        tuple([9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8]):[2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1],
        tuple([8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7]):[3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2],
        tuple([7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6]):[4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3],
        tuple([6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5]):[5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4],
        tuple([5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4]):[6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5],
        tuple([4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3]):[7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6],
        tuple([3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2]):[8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7],
        tuple([2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1]):[9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8],
        tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]):[10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    },
    13:{
        tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]):[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
        tuple([12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]):[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0],
        tuple([11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1],
        tuple([10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2],
        tuple([9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8]):[4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3],
        tuple([8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7]):[5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4],
        tuple([7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6]):[6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5],
        tuple([6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5]):[7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6],
        tuple([5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4]):[8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7],
        tuple([4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3]):[9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8],
        tuple([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2]):[10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        tuple([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1]):[11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0]):[12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    },
    17:{
        tuple(
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
        ):[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
        tuple(
            [16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        ):[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0],
        tuple(
            [15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
        ):[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1],
        tuple(
            [14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
        ):[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2],
        tuple(
            [13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        ):[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3],
        tuple(
            [12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
        ):[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4],
        tuple(
            [11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        ):[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5],
        tuple(
            [10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        ):[7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6],
        tuple(
            [9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8]
        ):[8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7],
        tuple(
            [8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7]
        ):[9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8],
        tuple(
            [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6]
        ):[10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        tuple(
            [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5]
        ):[11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        tuple(
            [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4]
        ):[12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
        tuple(
            [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3]
        ):[13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
        tuple(
            [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2]
        ):[14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
        tuple(
            [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1]
        ):[15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
        tuple(
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0]
        ):[16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

    },
    19:{
        tuple(
	        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
        ):[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
        tuple(
	        [18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
        ):[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0],
        tuple(
	        [17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
        ):[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1],
        tuple(
	        [16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        ):[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2],
        tuple(
	        [15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
        ):[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3],
        tuple(
	        [14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
        ):[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4],
        tuple(
	        [13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        ):[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5],
        tuple(
	        [12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
        ):[7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6],
        tuple(
	        [11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        ):[8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7],
        tuple(
	        [10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        ):[9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8],
        tuple(
	        [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8]
        ):[10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        tuple(
	        [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7]
        ):[11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        tuple(
	        [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6]
        ):[12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
        tuple(
	        [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5]
        ):[13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
        tuple(
	        [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4]
        ):[14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
        tuple(
	        [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3]
        ):[15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
        tuple(
	        [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2]
        ):[16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        tuple(
	        [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1]
        ):[17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
        tuple(
	        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0]
        ):[18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
    }
}

radix = [
        (2**3)*(3**4)*(5**6)*(7**8)*(11**12)*(13**14)*(17**18),
        (2**3)*(3**4)*(5**6)*(7**8)*(11**12)*(13**14),
        (2**3)*(3**4)*(5**6)*(7**8)*(11**12),
        (2**3)*(3**4)*(5**6)*(7**8),
        (2**3)*(3**4)*(5**6),
        (2**3)*(3**4),
        (2**3),
        1
    ]

primes = [19, 17, 13, 11, 7, 5, 3, 2]

N_primes = 8

identity = {
    2:([0 for i in range(2)], [i for i in range(2)]),
    3:([0 for i in range(3)], [i for i in range(3)]),
    5:([0 for i in range(5)], [i for i in range(5)]),
    7:([0 for i in range(7)], [i for i in range(7)]),
    11:([0 for i in range(11)], [i for i in range(11)]),
    13:([0 for i in range(13)], [i for i in range(13)]),
    17:([0 for i in range(17)], [i for i in range(17)]),
    19:([0 for i in range(19)], [i for i in range(19)]),
}
###########################################################################
###########################################################################
# Calculates action of permutation b on the set a
def pmat_mult(a:list, b:list)->list:
    return [a[x] for x in b]

# Multiply two elements in W2,p
def wmat_mult(s:tuple, t:tuple)->tuple:
    ns, sG = s
    nt, tG = t
    p = len(ns)
    pt = pmat_mult(nt, perm_inv[p][tuple(sG)])
    res = [(x+y)%p for x,y in zip(ns, pt)]
    return (res, pmat_mult(sG, tG))

# Finds inverse of element in W2,p
def wmat_inv(s:tuple)->tuple:
    ns, sG = s
    p = len(ns)
    t = pmat_mult(list(map(lambda x:(p-x)%p, ns)), sG)
    return (t, perm_inv[p][tuple(sG)])
    
###########################################################################
###########################################################################
# Maps integer to element in W2,p
def int_to_subelem(N:int, p:int)->list:
    assert N>=0 and N<p**(p+1)

    coefs = [0]*(p+1)
    i = 0
    while N!=0:
        N, r = divmod(N, p)
        coefs[i] = r
        i += 1
    coefs = coefs[::-1]
    z = coefs[:-1]
    sigma = power[p][coefs[-1]]
    return (z, sigma)

# Maps element in W2,p to integer
def subelem_to_int(x:tuple, p:int)->int:
    coefs = x[0] + [inv_power[p][tuple(x[1])]]
    coefs = coefs[::-1]
    N = 0
    for k in range(p+1):
        N += coefs[k]*(p**k)
    return N
###########################################################################
###########################################################################
# Converts integer to element in G
def int_to_elem(N:int)->list:
    e = [None]*N_primes
    for i in range(N_primes):
        if N >= radix[i]:
            break
        e[N_primes-i-1] = identity[primes[i]]
    for j in range(i, N_primes):
        r, N = divmod(N, radix[j])
        e[N_primes-j-1] = int_to_subelem(r, primes[j])
    return e

# Converts element in G to integer
def elem_to_int(e:list)->int:
    N = 0
    primes_ = primes[::-1]
    radix_ = radix[::-1]
    for i, sigma in enumerate(e):
        N += radix_[i]*subelem_to_int(sigma, primes_[i])   
    return N
###########################################################################
###########################################################################
# Multiplies 2 elements of G
def multiplyG(g1:list, g2:list)->list:
    return [wmat_mult(w1, w2) for w1, w2 in zip(g1, g2)]

# Finds the inverse of element in G
def invertG(g:list)->list:
    return [wmat_inv(w) for w in g]
###########################################################################
###########################################################################

# ---- EXAMPLE ---- #
#import time

#x = (2**3)*(3**4)*(5**6)*(7**8)*(11**12)*(13**14)*(17**18)*(19**20)-1

#start_time = time.time()
#x = int_to_elem(x)
#t = time.time()-start_time
#print(f"Time to convert biggest integer to element: {t} seconds")

#start_time = time.time()
#elem_to_int(x)
#t = time.time()-start_time
#print(f"Time to convert biggest element to integer: {t} seconds")

#start_time = time.time()
#multiplyG(x, x)
#t = time.time()-start_time
#print(f"Time to multiply the biggest element by itself: {t} seconds")

#start_time = time.time()
#invertG(x,)
#t = time.time()-start_time
#print(f"Time to invert the biggest element: {t} seconds")

